#include "stdafx.h" // стандартная библиотека
#include "FunMod.h" // написанная вручную библиотека
#include "string.h" // библиотека для работы со строками

int StrRepair(char* src, bool* er) // модуль обработки введенной строки
{
	char sOut[MY_STR_MAX_LEN]; // инициализация строки выхода (выходная строка), которую потом вернем
	bool znak = false; // инициализация булевской переменной, нужной для определения  наличия знака
	int j = 0; // инициализация необходимой переменной
	for (int i = 0; i < MY_STR_MAX_LEN && src[i]; i++) // цикл проверки строки на ошибки, и перенос найденного числа в строку выхода
	{
		//if (((src[i] == '-') && (!znak)) || ((src[i] >= '0') && (src[i] <= '9') && (!znak))) // проверка на минус
		//{
		//	sOut[0] = src[i]; // присваивание нулевому элементу выходной строки значение первой цифры входного числа
		//	znak = true; // присваивание переменной значение правда
		//	j++; // увеличение счетчика на единицу
		//	continue; // пропуск всего кода, написанного ниже, и переход к следующей итерации цикла for
		//}		if ((src[i] < '0') || (src[i] > '9')) // проверка на не цифры
		{
			*er = true; // присваивание переменной значение правда
			continue; // пропуск всего кода, написанного ниже, и переход к следующей итерации цикла for
		}
		sOut[j] = src[i]; // присваивание выходной строке соответствующее значение входной строки
		j++; // увеличение счетчика для выходной строки на единицу
	}
	sOut[j] = '\0'; // окончание выходной строки
	strcpy_s(src, MY_STR_MAX_LEN, sOut); // копирование значения выходной строки во входную

	return 0; // возвращение нуля
}

void MyStrTab(const int n, __int64 phno, char* nick, char* mail, char* result, size_t resSize) // код нашей объявленной функции
{
	if (n > 99) // условие, при котором функция работать не будет
		return; // выход из функции, если условие нарушено
	char TabTemp[] = "   |               |               |                    "; // шаблон для вывода результатов = скелет таблицы

	char bufX[3]; // создание строки для первого столбца
	sprintf_s(bufX, "%d", n); // внесение результата в строку для первого столбца
	size_t pos = 2 - strlen(bufX); // инициализация позиции для замены на результат
	for (int i = 0; i < strlen(bufX); i++) // цикл замены шаблона (= скелета таблицы) на наши результаты
		TabTemp[pos + i] = bufX[i]; // сама замена

	char bufp[15]; // создание строки для второго столбца
	sprintf_s(bufp, "%I64d", phno); // внесение результата в строку для второго столбца
	pos = 19 - strlen(bufp); // инициализация позиции для замены на результат
	for (int i = 0; i < strlen(bufp); i++) // цикл замены шаблона (= скелета таблицы) на наши результаты
		TabTemp[pos + i] = bufp[i]; // сама замена

	char bufr[MY_STR_MAX_LEN]; // создание строки для третьего столбца
	sprintf_s(bufr, "%s", nick); // внесение результата в строку для третьего столбца
	pos = 35 - strlen(bufr); // инициализация позиции для замены на результат
	for (int i = 0; i < strlen(bufr); i++) // цикл замены шаблона (= скелета таблицы) на наши результаты
		TabTemp[pos + i] = bufr[i]; // сама замена

	char bufz[MY_STR_MAX_LEN]; // создание строки для третьего столбца
	sprintf_s(bufz, "%s", mail); // внесение результата в строку для третьего столбца
	pos = 56 - strlen(bufz); // инициализация позиции для замены на результат
	for (int i = 0; i < strlen(bufz); i++) // цикл замены шаблона (= скелета таблицы) на наши результаты
		TabTemp[pos + i] = bufz[i]; // сама замена

	strcpy_s(result, resSize, TabTemp); // замена выходных из функции данных на нашу строку таблицы

}